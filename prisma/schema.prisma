// schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// =============================================
// MODELOS CENTRALIZADOS (App Principal)
// =============================================

model User {
  id            String   @id @default(cuid())
  email         String   @unique
  firstName     String?
  lastName      String?
  avatar        String?
  phone         String?
  
  // Campos para autenticación
  password      String?  // Null si solo usa OAuth
  emailVerified DateTime?
  isActive      Boolean  @default(true)
  
  // OAuth providers
  googleId      String?  @unique
  
  // Verificación de email
  emailVerificationToken String?
  emailVerificationExpires DateTime?
  
  // Reset de contraseña
  passwordResetToken String?
  passwordResetExpires DateTime?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relación muchos a muchos con tenants
  userTenants UserTenant[]
  
  // Sesiones para autenticación
  sessions Session[]

  @@map("users")
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  tenantId     String?  // Sesión específica para un tenant
  token        String   @unique
  refreshToken String?  @unique
  expiresAt    DateTime
  createdAt    DateTime @default(now())
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Tenant {
  id          String   @id @default(cuid())
  slug        String   @unique // Para identificar en URLs y headers
  name        String
  description String?
  
  // Información del negocio
  businessType String? // clinic, salon, consultancy, etc.
  address     String?
  phone       String?
  website     String?
  logo        String?
  
  // Configuración
  timezone    String   @default("America/Santiago")
  currency    String   @default("CLP")
  isActive    Boolean  @default(true)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Configuración específica del tenant
  settings TenantSettings?

  // Relaciones con usuarios
  userTenants UserTenant[]
  
  // Sistema de roles y permisos
  roles Role[]
  permissions Permission[]
  rolePermissions RolePermission[]

  @@map("tenants")
}

model UserTenant {
  id       String @id @default(cuid())
  userId   String
  tenantId String
  
  // Rol dentro del tenant (ahora referencia a tabla Role)
  roleId   String?
  
  // Estado de la relación
  status   String @default("active") // active, suspended, pending_approval
  joinedAt DateTime @default(now())
  
  // Metadatos específicos del tenant
  metadata Json? // Para datos adicionales específicos por tenant

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  role   Role?  @relation(fields: [roleId], references: [id])

  @@unique([userId, tenantId])
  @@map("user_tenants")
}

model TenantSettings {
  id       String @id @default(cuid())
  tenantId String @unique

  // Configuraciones de negocio
  allowSelfBooking     Boolean @default(true)
  requireApproval      Boolean @default(false)
  advanceBookingDays   Int     @default(30)
  cancellationHours    Int     @default(24)
  
  // Configuraciones de horarios
  workingHours         Json?   // Horarios de trabajo por día
  holidays             String[] // Fechas de días no laborales
  
  // Configuraciones de notificación
  emailNotifications   Boolean @default(true)
  smsNotifications     Boolean @default(false)
  reminderHours        Int     @default(24)
  
  // Configuraciones de registro
  allowGoogleSignIn    Boolean @default(true)
  allowEmailSignUp     Boolean @default(true)
  requirePhoneVerification Boolean @default(false)
  requireEmailVerification Boolean @default(true)
  
  // Branding básico
  primaryColor         String  @default("#007bff")
  secondaryColor       String  @default("#6c757d")
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@map("tenant_settings")
}

// =============================================
// SISTEMA DE ROLES Y PERMISOS
// =============================================

model Role {
  id          String @id @default(cuid())
  tenantId    String
  name        String // "owner", "admin", "provider", "client", "receptionist"
  displayName String // "Propietario", "Administrador", "Profesional", "Cliente"
  description String?
  
  // Configuración del rol
  isSystemRole Boolean @default(false) // Roles del sistema no se pueden eliminar
  isActive     Boolean @default(true)
  priority     Int     @default(0) // Para ordenar roles por jerarquía
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  
  // Relaciones
  userTenants UserTenant[]
  rolePermissions RolePermission[]

  @@unique([tenantId, name])
  @@map("roles")
}

model Permission {
  id          String @id @default(cuid())
  tenantId    String?  // null = permiso global del sistema
  name        String   // "users.read", "appointments.create", "settings.update"
  displayName String   // "Ver usuarios", "Crear citas", "Actualizar configuración"
  description String?
  category    String?  // "users", "appointments", "settings", "reports"
  
  // Configuración del permiso
  isSystemPermission Boolean @default(false)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tenant Tenant? @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  
  // Relaciones
  rolePermissions RolePermission[]

  @@unique([tenantId, name])
  @@map("permissions")
}

model RolePermission {
  id           String @id @default(cuid())
  tenantId     String
  roleId       String
  permissionId String
  
  createdAt DateTime @default(now())

  tenant     Tenant     @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  role       Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@unique([roleId, permissionId])
  @@map("role_permissions")
}

// =======================================
// MODELOS BASE PARA FUTURAS EXPANSIONES
// =======================================

model Service {
  id          String @id @default(cuid())
  tenantId    String
  name        String
  description String?
  duration    Int    // Duración en minutos
  price       Decimal? @db.Decimal(10, 2)
  isActive    Boolean @default(true)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("services")
}

model Provider {
  id       String @id @default(cuid())
  tenantId String
  userId   String // Referencia al User que es provider
  
  // Información profesional
  title       String? // Dr., Lic., etc.
  specialties String[]
  bio         String?
  
  // Configuración de agenda
  isActive Boolean @default(true)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([tenantId, userId])
  @@map("providers")
}

// Para futuras reservas
model Appointment {
  id         String   @id @default(cuid())
  tenantId   String
  clientId   String   // userId del cliente
  providerId String?  // userId del proveedor
  serviceId  String?
  
  // Detalles de la cita
  title       String
  description String?
  startTime   DateTime
  endTime     DateTime
  status      String @default("scheduled") // scheduled, confirmed, cancelled, completed
  
  // Metadatos
  notes      String?
  metadata   Json?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("appointments")
}